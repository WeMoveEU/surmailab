<?php

require_once 'surmailab.helpers.php';

/**
 * Implements hook_menu().
 */
function surmailab_menu() {
  $items = array();
  $items['admin/config/content/surmailab'] = array(
    'title' => 'Survey into CiviCRM Mailing AB',
    'description' => 'Create new CiviCRM Mailing AB based on chosen survey',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('surmailab_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/surmailab'] = array(
    'title' => 'Surmailab',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('surmailab_surtab', 1),
    'access callback' => 'surmailab_access_check',
    'access arguments' => array(1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  return $items;
}

function surmailab_access_check($node) {
  if ($node->type == 'survey') {
    return TRUE;
  }
  return FALSE;
}

function surmailab_surtab($form_state, $node) {
  civicrm_initialize();
  $surveyId = $node['build_info']['args'][0]->nid;
  $survey = node_load($surveyId);
  $language = $survey->language;
  $recipients = $survey->field_recipients['und'][0]['value'];

  $languageGroupNameSuffix = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'language_group_name_suffix');
  $languageGroupName = $language . $languageGroupNameSuffix;
  $param = array(
    'sequential' => 1,
    'return' => "id",
    'name' => $languageGroupName,
  );
  $result = civicrm_api3('Group', 'get', $param);
  $defaultGroupId = 0;
  if ($result['count'] == 1) {
    $defaultGroupId = $result['id'];
  }

  $surveys = _surmailab_survey_list();
  $list = array(null => t('-- choose survey --'));
  foreach ($surveys as $survey) {
    $list[$survey['nid']] = $survey['title'] . ' (' . $survey['language'] .' ' . $survey['nid'] . ')';
  }
  $groups = _surmailab_group_list();

  $form['surmailab_form_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Survey into CiviCRM Mailing AB'),
  );

  $form['surmailab_form_fieldset']['survey_id'] = array(
    '#type' => 'hidden',
    '#value' => $surveyId,
  );

  $form['surmailab_form_fieldset']['language'] = array(
    '#type' => 'item',
    '#title' => t('Language'),
    '#markup' => $language,
  );

  $form['surmailab_form_fieldset']['recipients'] = array(
    '#type' => 'item',
    '#title' => t('Number of recipients'),
    '#markup' => $recipients,
  );

  $form['surmailab_form_fieldset']['group_id'] = array(
    '#type' => 'select',
    '#title' => t('Language group'),
    '#description' => t('Language group from which survey group will be created'),
    '#options' => array('' => t('- choose group -')) + $groups,
    '#default_value' => $defaultGroupId,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create mailing AB'),
  );
  $form['#submit'] = array('_surmailab_form_submit');

  return $form;
}


/**
 * Page callback: Current posts settings
 *
 * @see current_posts_menu()
 */
function surmailab_form($form, &$form_state) {
  // todo add link to randomSample
  $defaultGroupId = $_GET['group_id'];
  $defaultSurveyId = $_GET['survey_id'];
  $surveys = _surmailab_survey_list();
  $list = array(null => t('-- choose survey --'));
  foreach ($surveys as $survey) {
    $list[$survey['nid']] = $survey['title'] . ' (' . $survey['language'] .' ' . $survey['nid'] . ')';
  }
  $groups = _surmailab_group_list();

  $form['surmailab_form_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Survey'),
  );


  $form['surmailab_form_fieldset']['survey_id'] = array(
    '#type' => 'select',
    '#title' => t('Survey'),
    '#description' => t('Content of survey will be used for preparing Mailing A/B'),
    '#options' => array('' => t('- choose survey -')) + $list,
    '#default_value' => $defaultSurveyId,
    '#required' => TRUE,
  );

  $form['surmailab_form_fieldset']['group_id'] = array(
    '#type' => 'select',
    '#title' => t('Group'),
    '#description' => t('Group for mailing AB'),
    '#options' => array('' => t('- choose group -')) + $groups,
    '#default_value' => $defaultGroupId,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create mailing AB'),
  );
  $form['#submit'] = array('_surmailab_form_submit');

  return $form;
}


/**
 * Create Mailing AB.
 *
 * @param $form
 * @param $form_state
 */
function _surmailab_form_submit($form, &$form_state) {
  $surveyId = $form_state['values']['survey_id'];
  $groupId = $form_state['values']['group_id'];

  $node = node_load($surveyId);
  $title = $node->title;
  $language = $node->language;
  $body = $node->body[$language][0]['safe_value'];
  $body = $node->body['und'][0]['safe_value']; // fixme check on prod
  $body = _surmailab_compose_body($body, $surveyId, $language);
  $internalName = $node->field_internal_name['und'][0]['safe_value'];
  $recipients = $node->field_recipients['und'][0]['value'];
  CRM_Core_Error::debug_var('$node', $node);

  $groupName = 'SURVEY_' . $surveyId . '_' . date('Ymd') . '_' . strtoupper($language);
  $groupTitle = 'SURVEY-' . $surveyId . '-' . date('Ymd') . '-' . strtoupper($language);
  $params = array(
    'sequential' => 1,
    'name' => $groupName,
    'title' => $groupTitle,
    'group_type' => "2",
  );
  $result = civicrm_api3('Group', 'get', $params);
  if ($result['count'] == 1) {
    $result = civicrm_api3('Group', 'delete', array('id' => $result['id']));
  }
  $result = civicrm_api3('Group', 'create', $params);
  $surveyGroupId = 0;
  if ($result['count'] == 1) {
    $surveyGroupId = $result['id'];
  }

  // todo randomsample from, to, number

  $components = db_select('webform_component', 'wc')
    ->fields('wc', array('cid', 'name', 'type', 'extra'))
    ->condition('nid', $surveyId)
    ->orderBy('weight')
    ->execute()
    ->fetchAllAssoc('cid', PDO::FETCH_ASSOC);

  $renderArray = array();
  $i = 0;
  foreach ($components as $c) {
    $renderArray[++$i] = array(
      '#type' => 'text',
      '#title' => $node->title,
      '#value' => $c['name'],
    );
    if ($c['type'] == 'select') {
      $extra = unserialize($c['extra']);
      $items = explode("\n", trim($extra['items']));
      $options = array();
      foreach ($items as $item) {
        $t = explode('|', $item);
        $options[$t[0]] = $t[1];
      }
      $renderArray[$i]['#options'] = $options;
      $renderArray[$i]['#type'] = 'select';
      $renderArray[$i]['#theme'] = 'item_list';
    }
  }
  $mailings = array(
    'a' => array(
      'name' => substr('Test A ('.$internalName.')', 0, 128),
      'subject' => substr($title, 0, 128),
      'mailing_type' => 'experiment',
    ),
    'b' => array(
      'name' => substr('Test B ('.$internalName.')', 0, 128),
      'subject' => substr($title, 0, 128),
      'mailing_type' => 'experiment',
    ),
    'c' => array(
      'name' => substr('Final ('.$internalName.')', 0, 128),
      'subject' => substr($title, 0, 128),
      'mailing_type' => 'winner',
    ),
  );
  $adminId = 1;
  foreach ($mailings as $key => $test) {
    $params = array(
      'name' => $test['name'],
      'subject' => $test['subject'],
      'body_text' => '', // todo change to txt version
      'body_html' => $body,
      'created_id' => $adminId,
      'created_date' => date('YmdHis'),
      'mailing_type' => $test['mailing_type'],
      'unsubscribe_id' => 5,
      'resubscribe_id' => 6,
      'optout_id' => 7,
      'reply_id' => 8,
      'open_tracking' => 1,
      'url_tracking' => 1,
      'dedupe_email' => 1,
      'from_name' => 'We Move Europe', // todo depends on language
      'from_email' => 'info@wemove.eu', // todo depends on language
    );
    $mailing = new CRM_Mailing_BAO_Mailing();
    $mm = $mailing->add($params);
    _surmailab_includeGroup($mm->id, $surveyGroupId);
    $mailings[$key]['id'] = $mm->id;
  }

  $params = array(
    'sequential' => 1,
    'testing_criteria' => "subject",
    'name' => 'SURVEY '.$internalName,
    'status' => 'Draft',
    'mailing_id_a' => $mailings['a']['id'],
    'mailing_id_b' => $mailings['b']['id'],
    'mailing_id_c' => $mailings['c']['id'],
    'group_percentage' => 50,
    'created_date' => date('YmdHis'),
    'created_id' => $adminId,
  );
  $mab = new CRM_Mailing_BAO_MailingAB();
  $mailab = $mab->add($params);

  $node->field_mailing_id = array('und' => array(0 => array('value' => $mailab->id)));
  node_save($node);
  // todo add drupal message on success
}


/**
 * @return array mixed
 */
function _surmailab_survey_list() {
  $query = db_select('node', 'n', array('fetch' => PDO::FETCH_ASSOC));
  $query->addTag('survey_list');
  $query->leftJoin(
    'field_data_field_mailing_id',
    'm',
    'n.nid = m.entity_id AND entity_type = :type AND bundle = :bundle',
    array(':type' => 'node', ':bundle' => 'survey')
  );
  $query->fields('n', array('nid', 'title', 'created', 'language'));
  $query->condition('type', 'survey');
  $query->isNull('m.entity_id');
  $query->orderBy('title');
  return $query->execute();
}


/**
 * @param int $surveyId
 *
 * @return mixed
 */
function _surmailab_get_survey($surveyId) {
  return db_select('node', 'n')->fields('n')->condition('nid', $surveyId)->execute()->fetchAssoc();
}


/**
 * Get list of group.
 *
 * @return array
 */
function _surmailab_group_list() {
  // todo add filtering by convention of name of group
  civicrm_initialize();
  $query = "SELECT g.id, g.title
            FROM civicrm_group g";
  $dao = CRM_Core_DAO::executeQuery($query);
  $list = array();
  while ($dao->fetch()) {
    $list[$dao->id] = $dao->title;
  }
  return $list;
}


/**
 * Add include group to mailing.
 * @param int $mailingId
 * @param int $groupId
 *
 * @throws \CiviCRM_API3_Exception
 */
function _surmailab_includeGroup($mailingId, $groupId) {
  $params = array(
    'mailing_id' => $mailingId,
    'group_type' => 'Include',
    'entity_table' => CRM_Contact_BAO_Group::getTableName(),
    'values' => array(array('entity_id' => $groupId)),
  );
  civicrm_api3('mailing_group', 'replace', $params);
}


/**
 * Override civicrm_api3 function.
 *
 * @param string $subject
 * @param string $action
 * @param array $params
 *
 * @return array
 */
function _civicrm_api3($subject, $action, $params) {
  civicrm_initialize();
  try {
    return civicrm_api3($subject, $action, $params);
  } catch (CiviCRM_API3_Exception $e) {
    return array(
      'error' => $e->getMessage(),
      'error_code' => $e->getErrorCode(),
      'error_data' => $e->getExtraParams()
    );
  }
}
