<?php

/**
 * Implements hook_menu().
 */
function surmailab_menu() {
  $items = array();
  $items['admin/config/content/surmailab'] = array(
    'title' => 'Survey into CiviCRM Mailing AB',
    'description' => 'Create new CiviCRM Mailing AB based on chosen survey',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('surmailab_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}


/**
 * Page callback: Current posts settings
 *
 * @see current_posts_menu()
 */
function surmailab_form($form, &$form_state) {
  // todo add link to randomSample
  $surveys = _surmailab_survey_list();
  $list = array(null => t('-- choose survey --'));
  foreach ($surveys as $survey) {
    $list[$survey['nid']] = $survey['title'] . ' (' . $survey['language'] . ')';
  }
  $groups = _surmailab_group_list();

  $form['surmailab_form_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Survey'),
  );


  $form['surmailab_form_fieldset']['survey_id'] = array(
    '#type' => 'select',
    '#title' => t('Survey'),
    '#description' => t('Content of survey will be used for preparing Mailing A/B'),
    '#options' => array('' => t('- choose survey -')) + $list,
    '#required' => TRUE,
  );

  $form['surmailab_form_fieldset']['group_id'] = array(
    '#type' => 'select',
    '#title' => t('Group'),
    '#description' => t('Group for mailing AB'),
    '#options' => array('' => t('- choose group -')) + $groups,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create mailing AB'),
  );
  $form['#submit'] = array('_surmailab_form_submit');

  return $form;
}


/**
 * Create Mailing AB.
 *
 * @param $form
 * @param $form_state
 */
function _surmailab_form_submit($form, &$form_state) {
  $surveyId = $form_state['values']['survey_id'];
  $groupId = $form_state['values']['group_id'];
  $survey = _surmailab_get_survey($surveyId);

  $node = node_load($surveyId);
  $title = $node->title;
  $language = $node->language;
  $body = $node->field_body['und'][0]['safe_value'];
  $node->field_mailing_abtest_id; // array

  $components = db_select('webform_component', 'wc')
    ->fields('wc', array('cid', 'name', 'type', 'extra'))
    ->condition('nid', $surveyId)
    ->orderBy('weight')
    ->execute()
    ->fetchAllAssoc('cid', PDO::FETCH_ASSOC);

  $renderArray = array();
  $i = 0;
  foreach ($components as $c) {
    $renderArray[++$i] = array(
      '#type' => 'text',
      '#title' => $node->title,
      '#value' => $c['name'],
    );
    if ($c['type'] == 'select') {
      $extra = unserialize($c['extra']);
      $items = explode("\n", trim($extra['items']));
      $options = array();
      foreach ($items as $item) {
        $t = explode('|', $item);
        $options[$t[0]] = $t[1];
      }
      $renderArray[$i]['#options'] = $options;
      $renderArray[$i]['#type'] = 'select';
      $renderArray[$i]['#theme'] = 'item_list';
    }
  }
  // todo prepare Mailing AB params
  // todo -> get greeting and goodbye based on language (from own dictionary, array in this module)
  // todo -> compose content of mails A and B
  // todo save Mailing AB to civicrm
}


/**
 * @return array mixed
 */
function _surmailab_survey_list() {
  // todo get only surveys which have empty mailing_abtest_id
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created', 'language'))
    ->condition('type', 'survey')
    ->orderBy('title')
    ->execute()
    ->fetchAllAssoc('nid', PDO::FETCH_ASSOC);
  return $query;
}


/**
 * @param int $surveyId
 *
 * @return mixed
 */
function _surmailab_get_survey($surveyId) {
  return db_select('node', 'n')->fields('n')->condition('nid', $surveyId)->execute()->fetchAssoc();
}


/**
 * Get list of group.
 *
 * @return array
 */
function _surmailab_group_list() {
  // todo add filtering by convention of name of group
  civicrm_initialize();
  $query = "SELECT g.id, g.title
            FROM civicrm_group g LEFT JOIN civicrm_mailing_group mg ON mg.entity_id = g.id AND mg.entity_table = 'civicrm_group'
            WHERE mg.id IS NULL";
  $dao = CRM_Core_DAO::executeQuery($query);
  $list = array();
  while ($dao->fetch()) {
    $list[$dao->id] = $dao->title;
  }
  return $list;
}


/**
 * Override civicrm_api3 function.
 *
 * @param string $subject
 * @param string $action
 * @param array $params
 *
 * @return array
 */
function _civicrm_api3($subject, $action, $params) {
  civicrm_initialize();
  try {
    return civicrm_api3($subject, $action, $params);
  } catch (CiviCRM_API3_Exception $e) {
    return array(
      'error' => $e->getMessage(),
      'error_code' => $e->getErrorCode(),
      'error_data' => $e->getExtraParams()
    );
  }
}
